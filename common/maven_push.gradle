//打包发布
apply plugin: 'maven-publish'
MavenArtifactid = 'common'


//生成文档注释
task androidJavadocs(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}
//将文档打包成jar
task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}
//将源码打包，这一点对kotlin来说很重要，否则业务侧无法看到源码
task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}
configurations.maybeCreate("default")
def publishArtifact = artifacts.add("default", file('libs/oaid_sdk_1.0.30.aar'))


afterEvaluate {
    publishing {
        // 创建发布任务
        publications {
            release(MavenPublication) {
                from components.release
                groupId = MavenGroupId
                artifactId = MavenArtifactid
                description 'This is a liberary to test v1.0.0' // 说明描述
                version = MavenisSnapshot.toBoolean() ? MavenVersion + '-SNAPSHOT' : MavenVersion
                artifact(androidSourcesJar)//将源码打包进aar，如果不需要可以去掉
                //artifact(androidJavadocsJar)//将注释打包进aar，如果不需要可以去掉
                ///POM
//                pom.withXml {
//                    def dependenciesNode = asNode().appendNode('dependencies')
//                    configurations.api.allDependencies.each {
//                        if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
//                            def dependencyNode = dependenciesNode.appendNode('dependency')
//                            dependencyNode.appendNode('groupId', it.group)
//                            dependencyNode.appendNode('artifactId', it.name)
//                            dependencyNode.appendNode('version', it.version)
//                        }
//                    }
//                }
                ///POM
            }
        }

        repositories {
            maven {
                name = "development"
                allowInsecureProtocol true
                url = MavenisSnapshot.toBoolean() ? MavenSnapshotRepositoryURL : MavenReleaseRepositoryURL
                credentials {
                    username = MavenUserName
                    password = MavenPassWord
                }
            }
        }
    }
}